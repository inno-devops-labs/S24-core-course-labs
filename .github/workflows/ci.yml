
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        cache: 'pip'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('app_python/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest requests

    - name: Run linters
      run: |
        flake8 app_python/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app_python/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build and start Docker container
      uses: docker/build-push-action@v4
      with:
        context: .
        load: true
        tags: flask-time-server:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Build and start Docker container
      run: |
        docker run -d -p 5000:5000 flask-time-server
        sleep 10

    - name: Run tests
      run: |
        pytest app_python/tests/*.py

    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker image
      if: github.event_name != 'pull_request'
      run: |
        IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/flask-time-server
 
        VERSION=$(echo "${{ github.sha }}" | cut -c1-7)

        docker tag flask-time-server $IMAGE_ID:$VERSION
        docker tag flask-time-server $IMAGE_ID:latest
        docker push $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:latest

    - name: Clean up
      run: |
        docker ps -q | xargs -r docker stop
        docker ps -aq | xargs -r docker rm

