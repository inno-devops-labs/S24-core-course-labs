# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "lab3" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Recomended by GitHub Actions. Used to cache dependencies
    - name: Cache
      uses: actions/cache@v4.1.2
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: ~/.cache/pip
        # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-pip-${{ hashFiles('app_python/requirements.txt') }}
        # An ordered multiline string listing the prefix-matched keys, that are used for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
        restore-keys: |
          ${{ runner.os }}-pip- # optional
    

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r app_python/requirements.txt

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest app_python/test_app.py

  security:
    runs-on: ubuntu-latest

    needs:
      - build

    steps:
      - uses: actions/checkout@v4

      # From example given in lab3.md
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.10@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
            args: --severity-threshold=high


  docker:
    runs-on: ubuntu-latest

    needs:
      - build
      - security

    services:
      docker:
        image: docker:latest
        options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build  Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/python_time_app:latest ./app_python

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/python_time_app:latest